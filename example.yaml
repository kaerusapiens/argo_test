apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: artifact-example-
  namespace: argo
spec:
  entrypoint: literal-test
  onExit: on-exithandler
  volumes:
    - name: tmp
      emptyDir: {}
  templates:
    - name: literal-test
      steps:
        - - name: sprig-test
            template: sprig-test
        - - name: step1
            template: main
    - name: sprig-test
      inputs:
        parameters:
          - name: user
            value: "{{=sprig.get({'name': 'John', 'age': 30}, 'name')}}"
      script:
        image: alpine
        command: [sh, -c]
        source: |
          echo {{=type(false)}} #bool
          echo {{=type("false")}} #string
          echo {{=type(string(123))}} #string
          
          echo {{="test,test,test" | split(",")}} #[test,test,test]
          echo {{='John' in ['John', 'Jane'] ? 'Exist' : 'Not Exist'}} # Exist
          echo {{=replace("Hello World", "World", "Universe")}} #Hello Universe
          echo {{=join(["apple", "orange","grape"], ",")}} #" is must required.
          echo {{=keys({"name": "John", "age": 30})}} #[age,name]
          echo {{=values({"name": "John", "age": 30})}} #[John,30]

          cat << 'EOF'
          {{=trim("\nHello\n", "\n")}}
          {{=replace("\nHello\n", "\n", "")}}
          EOF
          
          echo {{=upper('hello') }}
          echo {{=sprig.upper('hello') }}

          echo {{=now()}}
          echo {{=sprig.dateInZone("20060102", sprig.now(), "Asia/Seoul") }}
          echo {{=sprig.date("20060102", sprig.now())}}
          echo {{=sprig.date("2006-01-02", sprig.dateModify("-24h", sprig.now()))}}
          
          echo {{=trim('  name   ')}} #name
          echo {{=sprig.trim('  name   ')}} #name

          echo {{inputs.parameters.user}} #John
          echo {{=sprig.last( ['one', 'two', 'three'] ) }}
    - name: main
      container:
        image: busybox
        command: [sh, -c]
        args: 
         - exit 1

    - name: on-exithandler
      steps:
        - - name: parse-failures-new
            template: parsing-new
            when : "{{workflow.status}} == Failed"      
        - - name: parse-failures
            template: parsing
            when : "{{workflow.status}} == Failed"
        - - name: output-parameters
            template: output-parsed-failures
            when : "{{workflow.status}} == Failed"
            arguments:
              parameters:
                - name: parsed-failures
                  value: "{{steps.parse-failures.outputs.parameters.parsed-failures}}"
    - name: parsing-new
      inputs:
        parameters:
          - name: sample
            value : "{{=sprig.fromJson(workflow.failures)}}"
      script:
        image: alpine
        command: [sh, -c]
        source: |
          echo {{inputs.parameters.sample}}
    - name: parsing
      outputs:
        parameters:
          - name: parsed-failures
            valueFrom:
              path: /tmp/parsed_failures.txt
      script:
        image: alpine
        command: [sh, -c]
        source: |
          apk add --no-cache jq
          echo '```' > /tmp/parsed_failures.txt
          
          echo '{{workflow.failures}}' | jq -r '
            fromjson
            | map(
                "‣ displayName: \(.displayName)\n   └ message: \(.message)\n   └ podName: \(.podName)\n   └ finishedAt: \(.finishedAt)"
            )
            | join("\n\n")
          ' >> /tmp/parsed_failures.txt
          
          echo '```' >> /tmp/parsed_failures.txt
        volumeMounts:
          - name: tmp
            mountPath: /tmp
    - name: output-parsed-failures
      inputs:
        parameters:
          - name: parsed-failures
            value: /tmp/parsed_failures.txt
      script:
        image: alpine
        command: [sh, -c]
        source: |
            cat << 'EOF' | tee /tmp/parsed_failures.txt
            {{inputs.parameters.parsed-failures}}
            EOF
        volumeMounts:
          - name: tmp
            mountPath: /tmp